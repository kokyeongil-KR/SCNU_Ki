#include "..\..\Common.h"

#define MULTICASTIP "235.7.8.9"
#define PORT 9000
#define BUFSIZE 512

void receive_messages(SOCKET sock) {
    struct sockaddr_in peeraddr;
    char buf[BUFSIZE + 1];
    int addrlen, retval;

    while (1) {
        addrlen = sizeof(peeraddr);
        retval = recvfrom(sock, buf, BUFSIZE, 0, (struct sockaddr *)&peeraddr, &addrlen);
        if (retval == SOCKET_ERROR) {
            err_display("recvfrom()");
            break;
        }

        buf[retval] = '\0';
        char addr[INET_ADDRSTRLEN];
        inet_ntop(AF_INET, &peeraddr.sin_addr, addr, sizeof(addr));
        printf("[UDP/%s:%d] %s\n", addr, ntohs(peeraddr.sin_port), buf);
    }
}

void send_messages(SOCKET sock, struct sockaddr_in *remoteaddr) {
    char buf[BUFSIZE + 1];
    int retval;

    while (1) {
        printf("\n[보낼 데이터] ");
        if (fgets(buf, BUFSIZE + 1, stdin) == NULL)
            break;

        int len = (int)strlen(buf);
        if (buf[len - 1] == '\n')
            buf[len - 1] = '\0';
        if (strlen(buf) == 0)
            break;

        retval = sendto(sock, buf, (int)strlen(buf), 0, (struct sockaddr *)remoteaddr, sizeof(*remoteaddr));
        if (retval == SOCKET_ERROR) {
            err_display("sendto()");
            break;
        }
        printf("[UDP] %d바이트를 보냈습니다.\n", retval);
    }
}

int main(int argc, char *argv[]) {
    int retval;

    // 윈속 초기화
    WSADATA wsa;
    if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)
        return 1;

    // 소켓 생성
    SOCKET sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock == INVALID_SOCKET) err_quit("socket()");

    // **SO_REUSEADDR 옵션 설정**
    DWORD optval = 1;
    retval = setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (const char *)&optval, sizeof(optval));
    if (retval == SOCKET_ERROR) err_quit("setsockopt()");

    // **bind()**
    struct sockaddr_in localaddr;
    memset(&localaddr, 0, sizeof(localaddr));
    localaddr.sin_family = AF_INET;
    localaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    localaddr.sin_port = htons(PORT);
    retval = bind(sock, (struct sockaddr *)&localaddr, sizeof(localaddr));
    if (retval == SOCKET_ERROR) err_quit("bind()");

    // **멀티캐스트 그룹 가입**
    struct ip_mreq mreq;
    inet_pton(AF_INET, MULTICASTIP, &mreq.imr_multiaddr);
    mreq.imr_interface.s_addr = htonl(INADDR_ANY);
    retval = setsockopt(sock, IPPROTO_IP, IP_ADD_MEMBERSHIP, (const char *)&mreq, sizeof(mreq));
    if (retval == SOCKET_ERROR) err_quit("setsockopt()");

    // **멀티캐스트 TTL 설정**
    DWORD ttl = 2;
    retval = setsockopt(sock, IPPROTO_IP, IP_MULTICAST_TTL, (const char *)&ttl, sizeof(ttl));
    if (retval == SOCKET_ERROR) err_quit("setsockopt()");

    // **송신 소켓 주소 초기화**
    struct sockaddr_in remoteaddr;
    memset(&remoteaddr, 0, sizeof(remoteaddr));
    remoteaddr.sin_family = AF_INET;
    inet_pton(AF_INET, MULTICASTIP, &remoteaddr.sin_addr);
    remoteaddr.sin_port = htons(PORT);

    // **수신 및 송신 쓰레드 생성**
    HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)receive_messages, (void *)sock, 0, NULL);
    if (hThread == NULL) {
        err_quit("CreateThread()");
    }

    // **메시지 송신**
    send_messages(sock, &remoteaddr);

    // **쓰레드 종료**
    WaitForSingleObject(hThread, INFINITE);
    CloseHandle(hThread);

    // **멀티캐스트 그룹 탈퇴**
    retval = setsockopt(sock, IPPROTO_IP, IP_DROP_MEMBERSHIP, (const char *)&mreq, sizeof(mreq));
    if (retval == SOCKET_ERROR) err_quit("setsockopt()");

    // **소켓 닫기**
    closesocket(sock);

    // **윈속 종료**
    WSACleanup();
    return 0;
}
