#include "..\..\Common.h"

#define MULTICASTIP "235.7.8.9"
#define PORT 9000
#define BUFSIZE 512

void receive_messages(SOCKET sock) {
    struct sockaddr_in peeraddr;
    char buf[BUFSIZE + 1];
    int addrlen, retval;

    while (1) {
        addrlen = sizeof(peeraddr);
        retval = recvfrom(sock, buf, BUFSIZE, 0, (struct sockaddr *)&peeraddr, &addrlen);
        if (retval == SOCKET_ERROR) {
            err_display("recvfrom()");
            break;
        }

        buf[retval] = '\0';
        char addr[INET_ADDRSTRLEN];
        inet_ntop(AF_INET, &peeraddr.sin_addr, addr, sizeof(addr));
        printf("[UDP/%s:%d] %s\n", addr, ntohs(peeraddr.sin_port), buf);
    }
}

void send_messages(SOCKET sock, struct sockaddr_in *remoteaddr) {
    char buf[BUFSIZE + 1];
    int retval;

    while (1) {
        printf("\n[보낼 데이터] ");
        if (fgets(buf, BUFSIZE + 1, stdin) == NULL)
            break;

        int len = (int)strlen(buf);
        if (buf[len - 1] == '\n')
            buf[len - 1] = '\0';
        if (strlen(buf) == 0)
            break;

        retval = sendto(sock, buf, (int)strlen(buf), 0, (struct sockaddr *)remoteaddr, sizeof(*remoteaddr));
        if (retval == SOCKET_ERROR) {
            err_display("sendto()");
            break;
        }
        printf("[UDP] %d바이트를 보냈습니다.\n", retval);
    }
}

int main(int argc, char *argv[]) {
    int retval;

    // 윈속 초기화
    WSADATA wsa;
    if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)
        return 1;

    // 소켓 생성
    SOCKET sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock == INVALID_SOCKET) err_quit("socket()");

    // **1. SO_REUSEADDR 옵션 설정 (학생 작성)**
    // 소켓 옵션으로 SO_REUSEADDR을 설정하여 여러 프로그램이 동일한 포트를 사용할 수 있도록 만듭니다.
    
    // **2. bind() 호출 (학생 작성)**
    // 수신 소켓을 특정 주소와 포트에 바인딩합니다.

    // **3. 멀티캐스트 그룹 가입 (학생 작성)**
    // 멀티캐스트 그룹에 가입하여 데이터를 수신할 수 있도록 설정합니다.

    // **4. 멀티캐스트 TTL 설정 (학생 작성)**
    // 멀티캐스트 데이터가 네트워크 경계를 넘을 수 있도록 TTL(Time To Live)을 설정합니다.


    // **5. 송신 소켓 주소 초기화 (학생 작성)**
    // 멀티캐스트 데이터를 보낼 주소를 설정합니다.


    // **6. 수신 스레드 생성 (학생 작성)**
    // 수신 메시지를 처리할 별도의 스레드를 생성합니다.


    // **7. 메시지 송신 (학생 작성)**


    // **8. 쓰레드 종료 및 멀티캐스트 그룹 탈퇴 (학생 작성)**
    // 프로그램 종료 시 스레드를 정리하고 멀티캐스트 그룹에서 탈퇴합니다.


    // **9. 소켓 닫기 및 윈속 종료 (학생 작성)**
    // 소켓 자원을 해제하고 Windows 소켓을 종료합니다.
    

    return 0;
}


